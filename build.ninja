#-------------------------------------------------------------------------------
# Configuration

# DEBUG enables DCHECK()
# Turning tracing on will generate _ton_ of spam in the C99 demo.
# Turning EXTRA_DEBUG on will generate even more spam.

### Debug build
#build_mode = -g -O0
#defs = ${defs} -DDEBUG
#defs = ${defs} -DMATCHERONI_ENABLE_TRACE
#defs = ${defs} -DEXTRA_DEBUG

### -Os needs stripping to minimize size
#build_mode = -g -Os
#build_mode = ${build_mode} -fdata-sections -ffunction-sections -Wl,--gc-sections
#build_mode = ${build_mode} -Wl,-s

### -O3 needs LTO to maximize performance
### LTO breaks "size obj/examples/json_parser.o"
build_mode = -O3 -Wl,-s
defs = ${defs} -DRELEASE
#build_mode = ${build_mode}
#build_mode = ${build_mode}

includes = -I.

#-------------------------------------------------------------------------------
# Rules

rule compile_cpp
  command = g++ -std=c++20 ${build_mode} ${defs} ${includes} -MMD -MF ${out}.d -c ${in} -o ${out}
  depfile = ${out}.d
  deps = gcc

rule compile_c
  command = gcc ${build_mode} ${includes} ${defs} -MMD -MF ${out}.d -c ${in} -o ${out}
  depfile = ${out}.d
  deps = gcc

rule link
  command = g++ ${build_mode} ${in} -lboost_system -lboost_regex -o ${out}

rule run_test
  command = ${in} && touch ${out}

#-------------------------------------------------------------------------------
# Tests

build obj/tests/matcheroni_test.o : compile_cpp tests/matcheroni_test.cpp
build bin/tests/matcheroni_test   : link obj/tests/matcheroni_test.o

build obj/tests/parseroni_test.o  : compile_cpp tests/parseroni_test.cpp
build bin/tests/parseroni_test    : link obj/tests/parseroni_test.o

#build bin/matcheroni_test_pass : run_test bin/test/matcheroni_test
#build bin/parseroni_test_pass  : run_test bin/test/parseroni_test

#-------------------------------------------------------------------------------
# Benchmark

# These are the various regex libraries that Matcheroni can be benchmarked
# against. CTRE and SRELL require that you copy their header into matcheroni/.

benchmark_defs = ${defs}
benchmark_defs = ${benchmark_defs} -DBENCHMARK_BASELINE
benchmark_defs = ${benchmark_defs} -DBENCHMARK_MATCHERONI
#benchmark_defs = ${benchmark_defs} -DBENCHMARK_CTRE
benchmark_defs = ${benchmark_defs} -DBENCHMARK_BOOST
benchmark_defs = ${benchmark_defs} -DBENCHMARK_STD_REGEX
#benchmark_defs = ${benchmark_defs} -DBENCHMARK_SRELL

# These defines are required to reduce the compiled size of the SRELL library used in the benchmark.
#benchmark_defs = ${benchmark_defs} -DSRELL_NO_UNICODE_ICASE -DSRELL_NO_UNICODE_PROPERTY -DSRELL_NO_UNICODE_DATA -DSRELL_NO_NAMEDCAPTURE -DSRELL_NO_VMODE

# This SRELL define seems to break things
#benchmark_defs = ${benchmark_defs} -DSRELL_NO_APIEXT

#build obj/benchmark.o    : compile_cpp examples/benchmark.cpp
#  defs = ${benchmark_defs}
#build bin/benchmark      : link obj/benchmark.o

#rule derp
#  command = echo ${defs}
#
#build bin/blerp : derp
#  defs = ${benchmark_defs}

#-------------------------------------------------------------------------------
# Examples

# Regex parser example
build obj/examples/regex_parser.o      : compile_cpp examples/regex_parser.cpp
build obj/examples/regex_parser_main.o : compile_cpp examples/regex_parser_main.cpp
build bin/examples/regex_parser        : link obj/examples/regex_parser.o obj/examples/regex_parser_main.o

# JSON parser example
build obj/examples/json_parser.o      : compile_cpp examples/json_parser.cpp
build obj/examples/json_parser_main.o : compile_cpp examples/json_parser_main.cpp
build bin/examples/json_parser        : link obj/examples/json_parser.o obj/examples/json_parser_main.o

#-------------------------------------------------------------------------------
# Tutorial examples

build obj/tutorial/json_tut1a.o    : compile_cpp tutorial/json_tut1a.cpp
build obj/tutorial/json_tut1b.o    : compile_cpp tutorial/json_tut1b.cpp
build obj/tutorial/json_tut1c.o    : compile_cpp tutorial/json_tut1c.cpp

build bin/tutorial/json_tut1a      : link obj/tutorial/json_tut1a.o
build bin/tutorial/json_tut1b      : link obj/tutorial/json_tut1b.o
build bin/tutorial/json_tut1c      : link obj/tutorial/json_tut1c.o

build obj/tutorial/json_tutorial.o : compile_cpp tutorial/json_tutorial.cpp
build bin/tutorial/json_tutorial   : link obj/tutorial/json_tutorial.o

#-------------------------------------------------------------------------------

# C99 lexer/parser example (not finished)
#build obj/c99_parser/c99_parser_test.o : compile_cpp examples/c99_parser/c99_parser_test.cpp
#build obj/c99_parser/C99Lexer.o        : compile_cpp examples/c99_parser/C99Lexer.cpp
#build obj/c99_parser/C99Parser.o       : compile_cpp examples/c99_parser/C99Parser.cpp
#build obj/c99_parser/Lexeme.o          : compile_cpp examples/c99_parser/Lexeme.cpp
#build obj/c99_parser/ParseNode.o       : compile_cpp examples/c99_parser/ParseNode.cpp
#build obj/c99_parser/Token.o           : compile_cpp examples/c99_parser/Token.cpp
#build obj/c99_parser/TypeScope.o       : compile_cpp examples/c99_parser/TypeScope.cpp

#build bin/c99_parser : link $
#  obj/c99_parser/c99_parser_test.o $
#  obj/c99_parser/C99Lexer.o $
#  obj/c99_parser/C99Parser.o $
#  obj/c99_parser/Lexeme.o $
#  obj/c99_parser/ParseNode.o $
#  obj/c99_parser/Token.o $
#  obj/c99_parser/TypeScope.o



#build obj/c99_parser/c_reference_hax.o : compile_cpp examples/c99_parser/c_reference_hax.cpp
#build obj/c99_parser/c_reference.o     : compile_cpp examples/c99_parser/c_reference.cpp
