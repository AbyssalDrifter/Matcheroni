#-------------------------------------------------------------------------------
# Configuration

build_mode = -g -O0
#build_mode = -g -Os
#build_mode = -g -O3

# -O3 needs LTO to maximize performance
#build_mode = ${build_mode} -flto

# -Os needs stripping to minimize size
#build_mode = ${build_mode} -fdata-sections -ffunction-sections -Wl,--gc-sections -Wl,-s

# DEBUG enables DCHECK()
#defs = ${defs} -DDEBUG

# Turning tracing on will generate _ton_ of spam in the C99 demo.
#defs = ${defs} -DMATCHERONI_ENABLE_TRACE

# Turning EXTRA_DEBUG on will generate even more spam.
#defs = ${defs} -DEXTRA_DEBUG

# These are the various regex libraries that Matcheroni can be benchmarked
# against. CTRE and SRELL require that you copy their header into matcheroni/.

defs = ${defs} -DBENCHMARK_BASELINE
defs = ${defs} -DBENCHMARK_MATCHERONI
#defs = ${defs} -DBENCHMARK_CTRE
#defs = ${defs} -DBENCHMARK_BOOST
defs = ${defs} -DBENCHMARK_STD_REGEX
#defs = ${defs} -DBENCHMARK_SRELL

# These defines are required to reduce the compiled size of the SRELL library used in the benchmark.
#defs = ${defs} -DSRELL_NO_UNICODE_ICASE -DSRELL_NO_UNICODE_PROPERTY -DSRELL_NO_UNICODE_DATA -DSRELL_NO_NAMEDCAPTURE -DSRELL_NO_VMODE

# This SRELL define seems to break things
#defs = ${defs} -DSRELL_NO_APIEXT

includes = -Imatcheroni

#-------------------------------------------------------------------------------
# Rules

rule compile_cpp
  command = g++ -std=c++20 ${build_mode} ${defs} ${includes} -MMD -MF ${out}.d -c ${in} -o ${out}
  depfile = ${out}.d
  deps = gcc

rule compile_c
  command = gcc ${build_mode} ${includes} ${defs} -MMD -MF ${out}.d -c ${in} -o ${out}
  depfile = ${out}.d
  deps = gcc

rule link
  command = g++ ${build_mode} ${in} -lboost_system -lboost_regex -o ${out}

#-------------------------------------------------------------------------------
# Targets

# Utility functions
build obj/utils.o : compile_cpp examples/utils.cpp

# Regex parser example
build obj/regex_parser.o : compile_cpp examples/regex_parser.cpp
build bin/regex_parser   : link obj/utils.o obj/regex_parser.o

# JSON parser example
build obj/json_parser.o  : compile_cpp examples/json_parser.cpp
build bin/json_parser    : link obj/utils.o obj/json_parser.o

# Trivial benchmark
build obj/benchmark.o    : compile_cpp examples/benchmark.cpp
build bin/benchmark      : link obj/utils.o obj/benchmark.o

# C99 lexer/parser example (not finished)
build obj/c99_parser/c99_parser_test.o : compile_cpp examples/c99_parser/c99_parser_test.cpp
build obj/c99_parser/C99Lexer.o        : compile_cpp examples/c99_parser/C99Lexer.cpp
build obj/c99_parser/C99Parser.o       : compile_cpp examples/c99_parser/C99Parser.cpp
build obj/c99_parser/Lexeme.o          : compile_cpp examples/c99_parser/Lexeme.cpp
build obj/c99_parser/ParseNode.o       : compile_cpp examples/c99_parser/ParseNode.cpp
build obj/c99_parser/Token.o           : compile_cpp examples/c99_parser/Token.cpp
build obj/c99_parser/TypeScope.o       : compile_cpp examples/c99_parser/TypeScope.cpp

build bin/c99_parser : link $
  obj/c99_parser/C99Lexer.o $
  obj/c99_parser/c_parser_test.o $
  obj/c99_parser/C99Parser.o $
  obj/c99_parser/Lexeme.o $
  obj/c99_parser/ParseNode.o $
  obj/c99_parser/Token.o $
  obj/c99_parser/TypeScope.o $
  obj/utils.o


#build obj/c99_parser/c_reference_hax.o : compile_cpp examples/c99_parser/c_reference_hax.cpp
#build obj/c99_parser/c_reference.o     : compile_cpp examples/c99_parser/c_reference.cpp
